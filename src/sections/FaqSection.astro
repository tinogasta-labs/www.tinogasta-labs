---
import Container from '~/components/shared/Container.astro'
import Icon from '~/components/ui/Icon.astro'
import { getTranslations } from '~/i18n'
import type { Language } from '~/i18n/types'

export type Props = {
  lang: Language
}

const { lang } = Astro.props
const t = getTranslations(lang)

const faqs = t['faq.list']
---

<section
  class="animate-fade-up mt-24 opacity-0 sm:mt-32 md:mt-56"
  id="faq"
  style={{ animationDelay: '0.3s', animationFillMode: 'forwards' }}
>
  <Container>
    <header class="mb-24 flex flex-col gap-4">
      <h1 class="text-2xl sm:text-4xl">{t['faq.title']}</h1>
      <p class="text-fg-muted text-xl font-light">
        {t['faq.subtitle']}
      </p>
    </header>

    <div>
      {
        faqs.map((faq, idx) => (
          <div class="border-fg/10 mb-4 border-b pb-4">
            <button
              aria-expanded="false"
              aria-controls="1"
              class="faq-question flex w-full items-center justify-between gap-4 py-4 text-left"
            >
              <h1 class="text-xl">{faq.question}</h1>
              <Icon name="chevron-down" class="text-fg-muted size-5 shrink-0" />
            </button>
            <div
              class="faq-answer max-h-0 transform overflow-hidden opacity-0 transition-all duration-300 ease-in-out"
              id={`answer-${idx}`}
            >
              <p class="text-fg-muted pb-6 text-lg leading-relaxed font-light">
                {faq.answer}
              </p>
            </div>
          </div>
        ))
      }
    </div>
  </Container>
</section>

<script>
  document.addEventListener('astro:page-load', () => {
    const buttons = document.querySelectorAll('.faq-question')

    buttons.forEach(btn => {
      btn.addEventListener('click', () => {
        const answer = btn.nextElementSibling
        const icon = btn.querySelector('svg')

        buttons.forEach(otherToggle => {
          if (otherToggle !== btn) {
            const otherContent = otherToggle.nextElementSibling
            const otherIcon = otherToggle.querySelector('svg')

            otherToggle.setAttribute('aria-expanded', 'false')
            otherContent?.classList.remove('active')
            otherIcon?.classList.remove('rotate-180')
          }
        })

        const isExpanded = btn.getAttribute('aria-expanded') === 'true'
        btn.setAttribute('aria-expanded', (!isExpanded).toString())

        if (isExpanded) {
          answer?.classList.remove('active')
          icon?.classList.remove('rotate-180')
        } else {
          answer?.classList.add('active')
          icon?.classList.add('rotate-180')
        }
      })
    })
  })
</script>

<style>
  .faq-answer.active {
    opacity: 1;
    max-height: min-content;
  }
</style>
